// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_AntialiasingOption
#include <AntialiasingOption.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_70655e35ad0a7bd0_935_new,"AntialiasingOption","new",0x1e0e5b1b,"AntialiasingOption.new","Options.hx",935,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_70655e35ad0a7bd0_944_left,"AntialiasingOption","left",0x2d2ee0ec,"AntialiasingOption.left","Options.hx",944,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_70655e35ad0a7bd0_953_right,"AntialiasingOption","right",0xd2e2fb57,"AntialiasingOption.right","Options.hx",953,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_70655e35ad0a7bd0_960_updateDisplay,"AntialiasingOption","updateDisplay",0xd93bf1b4,"AntialiasingOption.updateDisplay","Options.hx",960,0x9d9a0240)

void AntialiasingOption_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_70655e35ad0a7bd0_935_new)
HXLINE( 936)		super::__construct();
HXLINE( 937)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 938)			this->description = HX_("This option cannot be toggled in the pause menu.",b4,21,dd,c9);
            		}
            		else {
HXLINE( 940)			this->description = desc;
            		}
            	}

Dynamic AntialiasingOption_obj::__CreateEmpty() { return new AntialiasingOption_obj; }

void *AntialiasingOption_obj::_hx_vtable = 0;

Dynamic AntialiasingOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AntialiasingOption_obj > _hx_result = new AntialiasingOption_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AntialiasingOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x36f21469;
	}
}

bool AntialiasingOption_obj::left(){
            	HX_STACKFRAME(&_hx_pos_70655e35ad0a7bd0_944_left)
HXLINE( 945)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 946)			return false;
            		}
HXLINE( 947)		::flixel::FlxG_obj::save->data->__SetField(HX_("antialiasing",f4,16,b3,48),!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE( 948)		this->display = this->updateDisplay();
HXLINE( 949)		return true;
            	}


bool AntialiasingOption_obj::right(){
            	HX_STACKFRAME(&_hx_pos_70655e35ad0a7bd0_953_right)
HXLINE( 954)		this->left();
HXLINE( 955)		return true;
            	}


::String AntialiasingOption_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_70655e35ad0a7bd0_960_updateDisplay)
HXDLIN( 960)		::String _hx_tmp;
HXDLIN( 960)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ))) {
HXDLIN( 960)			_hx_tmp = HX_("off",6f,93,54,00);
            		}
            		else {
HXDLIN( 960)			_hx_tmp = HX_("on",1f,61,00,00);
            		}
HXDLIN( 960)		return ((HX_("Antialiasing: < ",9e,59,25,ad) + _hx_tmp) + HX_(" >",1e,1c,00,00));
            	}



::hx::ObjectPtr< AntialiasingOption_obj > AntialiasingOption_obj::__new(::String desc) {
	::hx::ObjectPtr< AntialiasingOption_obj > __this = new AntialiasingOption_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< AntialiasingOption_obj > AntialiasingOption_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	AntialiasingOption_obj *__this = (AntialiasingOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AntialiasingOption_obj), true, "AntialiasingOption"));
	*(void **)__this = AntialiasingOption_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

AntialiasingOption_obj::AntialiasingOption_obj()
{
}

::hx::Val AntialiasingOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AntialiasingOption_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AntialiasingOption_obj_sStaticStorageInfo = 0;
#endif

static ::String AntialiasingOption_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class AntialiasingOption_obj::__mClass;

void AntialiasingOption_obj::__register()
{
	AntialiasingOption_obj _hx_dummy;
	AntialiasingOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("AntialiasingOption",a9,31,2e,df);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AntialiasingOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AntialiasingOption_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AntialiasingOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AntialiasingOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

