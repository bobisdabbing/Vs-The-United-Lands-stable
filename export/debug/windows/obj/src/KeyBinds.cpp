// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_KeyBinds
#include <KeyBinds.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_256205a70c995989_17_resetBinds,"KeyBinds","resetBinds",0x495c34be,"KeyBinds.resetBinds","KeyBinds.hx",17,0xfb6ef907)
HX_LOCAL_STACK_FRAME(_hx_pos_256205a70c995989_42_keyCheck,"KeyBinds","keyCheck",0x95182fe0,"KeyBinds.keyCheck","KeyBinds.hx",42,0xfb6ef907)
HX_LOCAL_STACK_FRAME(_hx_pos_256205a70c995989_14_boot,"KeyBinds","boot",0xebe6cde9,"KeyBinds.boot","KeyBinds.hx",14,0xfb6ef907)

void KeyBinds_obj::__construct() { }

Dynamic KeyBinds_obj::__CreateEmpty() { return new KeyBinds_obj; }

void *KeyBinds_obj::_hx_vtable = 0;

Dynamic KeyBinds_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyBinds_obj > _hx_result = new KeyBinds_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyBinds_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2cac64d7;
}

bool KeyBinds_obj::gamepad;

void KeyBinds_obj::resetBinds(){
            	HX_STACKFRAME(&_hx_pos_256205a70c995989_17_resetBinds)
HXLINE(  18)		::flixel::FlxG_obj::save->data->__SetField(HX_("upBind",b8,51,92,70),HX_("W",57,00,00,00),::hx::paccDynamic);
HXLINE(  19)		::flixel::FlxG_obj::save->data->__SetField(HX_("downBind",3f,f3,fe,75),HX_("S",53,00,00,00),::hx::paccDynamic);
HXLINE(  20)		::flixel::FlxG_obj::save->data->__SetField(HX_("leftBind",64,39,12,48),HX_("A",41,00,00,00),::hx::paccDynamic);
HXLINE(  21)		::flixel::FlxG_obj::save->data->__SetField(HX_("rightBind",b9,4b,dd,ab),HX_("D",44,00,00,00),::hx::paccDynamic);
HXLINE(  22)		::flixel::FlxG_obj::save->data->__SetField(HX_("muteBind",36,71,98,10),HX_("ZERO",28,d7,b1,3b),::hx::paccDynamic);
HXLINE(  23)		::flixel::FlxG_obj::save->data->__SetField(HX_("volUpBind",2b,c1,5a,38),HX_("PLUS",5a,07,1b,35),::hx::paccDynamic);
HXLINE(  24)		::flixel::FlxG_obj::save->data->__SetField(HX_("volDownBind",72,65,58,14),HX_("MINUS",50,b8,56,86),::hx::paccDynamic);
HXLINE(  25)		::flixel::FlxG_obj::save->data->__SetField(HX_("fullscreenBind",98,95,ed,45),HX_("F",46,00,00,00),::hx::paccDynamic);
HXLINE(  26)		::flixel::FlxG_obj::save->data->__SetField(HX_("gpupBind",a1,30,42,a5),HX_("DPAD_UP",6b,00,87,a2),::hx::paccDynamic);
HXLINE(  27)		::flixel::FlxG_obj::save->data->__SetField(HX_("gpdownBind",68,1e,93,1d),HX_("DPAD_DOWN",72,1a,5b,87),::hx::paccDynamic);
HXLINE(  28)		::flixel::FlxG_obj::save->data->__SetField(HX_("gpleftBind",8d,64,a6,ef),HX_("DPAD_LEFT",17,2a,9d,8c),::hx::paccDynamic);
HXLINE(  29)		::flixel::FlxG_obj::save->data->__SetField(HX_("gprightBind",70,e4,ee,a5),HX_("DPAD_RIGHT",ac,b7,f4,f3),::hx::paccDynamic);
HXLINE(  30)		::flixel::FlxG_obj::save->data->__SetField(HX_("pauseBind",d3,ab,7d,45),HX_("ENTER",f8,a4,74,ee),::hx::paccDynamic);
HXLINE(  31)		::flixel::FlxG_obj::save->data->__SetField(HX_("gppauseBind",8a,44,8f,3f),HX_("START",42,ac,f9,01),::hx::paccDynamic);
HXLINE(  32)		::flixel::FlxG_obj::save->data->__SetField(HX_("resetBind",2c,ff,02,87),HX_("R",52,00,00,00),::hx::paccDynamic);
HXLINE(  33)		::flixel::FlxG_obj::save->data->__SetField(HX_("gpresetBind",e3,97,14,81),HX_("SELECT",fc,c6,b5,1c),::hx::paccDynamic);
HXLINE(  35)		int _hx_tmp;
HXDLIN(  35)		::String s = HX_("ZERO",28,d7,b1,3b);
HXDLIN(  35)		s = s.toUpperCase();
HXDLIN(  35)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(  35)			_hx_tmp = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            		}
            		else {
HXLINE(  35)			_hx_tmp = -1;
            		}
HXDLIN(  35)		::String s1 = HX_("NUMPADZERO",75,90,dd,33);
HXDLIN(  35)		s1 = s1.toUpperCase();
HXDLIN(  35)		int _hx_tmp1;
HXDLIN(  35)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(  35)			_hx_tmp1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            		}
            		else {
HXLINE(  35)			_hx_tmp1 = -1;
            		}
HXDLIN(  35)		::flixel::FlxG_obj::sound->muteKeys = ::Array_obj< int >::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1);
HXLINE(  36)		int _hx_tmp2;
HXDLIN(  36)		::String s2 = HX_("MINUS",50,b8,56,86);
HXDLIN(  36)		s2 = s2.toUpperCase();
HXDLIN(  36)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s2)) {
HXLINE(  36)			_hx_tmp2 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s2);
            		}
            		else {
HXLINE(  36)			_hx_tmp2 = -1;
            		}
HXDLIN(  36)		::String s3 = HX_("NUMPADMINUS",63,22,6d,b4);
HXDLIN(  36)		s3 = s3.toUpperCase();
HXDLIN(  36)		int _hx_tmp3;
HXDLIN(  36)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s3)) {
HXLINE(  36)			_hx_tmp3 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s3);
            		}
            		else {
HXLINE(  36)			_hx_tmp3 = -1;
            		}
HXDLIN(  36)		::flixel::FlxG_obj::sound->volumeDownKeys = ::Array_obj< int >::__new(2)->init(0,_hx_tmp2)->init(1,_hx_tmp3);
HXLINE(  37)		int _hx_tmp4;
HXDLIN(  37)		::String s4 = HX_("PLUS",5a,07,1b,35);
HXDLIN(  37)		s4 = s4.toUpperCase();
HXDLIN(  37)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s4)) {
HXLINE(  37)			_hx_tmp4 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s4);
            		}
            		else {
HXLINE(  37)			_hx_tmp4 = -1;
            		}
HXDLIN(  37)		::String s5 = HX_("NUMPADPLUS",a7,c0,46,2d);
HXDLIN(  37)		s5 = s5.toUpperCase();
HXDLIN(  37)		int _hx_tmp5;
HXDLIN(  37)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s5)) {
HXLINE(  37)			_hx_tmp5 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s5);
            		}
            		else {
HXLINE(  37)			_hx_tmp5 = -1;
            		}
HXDLIN(  37)		::flixel::FlxG_obj::sound->volumeUpKeys = ::Array_obj< int >::__new(2)->init(0,_hx_tmp4)->init(1,_hx_tmp5);
HXLINE(  38)		::PlayerSettings_obj::player1->controls->loadKeyBinds();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(KeyBinds_obj,resetBinds,(void))

void KeyBinds_obj::keyCheck(){
            	HX_STACKFRAME(&_hx_pos_256205a70c995989_42_keyCheck)
HXLINE(  43)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic) )) {
HXLINE(  45)			::flixel::FlxG_obj::save->data->__SetField(HX_("upBind",b8,51,92,70),HX_("W",57,00,00,00),::hx::paccDynamic);
HXLINE(  46)			::haxe::Log_obj::trace(HX_("No UP",ba,80,b8,32),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),46,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  48)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic) )) {
HXLINE(  50)			::flixel::FlxG_obj::save->data->__SetField(HX_("downBind",3f,f3,fe,75),HX_("S",53,00,00,00),::hx::paccDynamic);
HXLINE(  51)			::haxe::Log_obj::trace(HX_("No DOWN",81,8c,28,a7),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),51,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  53)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic) )) {
HXLINE(  55)			::flixel::FlxG_obj::save->data->__SetField(HX_("leftBind",64,39,12,48),HX_("A",41,00,00,00),::hx::paccDynamic);
HXLINE(  56)			::haxe::Log_obj::trace(HX_("No LEFT",26,9c,6a,ac),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),56,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  58)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic) )) {
HXLINE(  60)			::flixel::FlxG_obj::save->data->__SetField(HX_("rightBind",b9,4b,dd,ab),HX_("D",44,00,00,00),::hx::paccDynamic);
HXLINE(  61)			::haxe::Log_obj::trace(HX_("No RIGHT",bd,12,eb,a7),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),61,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  64)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gpupBind",a1,30,42,a5),::hx::paccDynamic) )) {
HXLINE(  66)			::flixel::FlxG_obj::save->data->__SetField(HX_("gpupBind",a1,30,42,a5),HX_("DPAD_UP",6b,00,87,a2),::hx::paccDynamic);
HXLINE(  67)			::haxe::Log_obj::trace(HX_("No GUP",23,87,ad,2e),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),67,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  69)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gpdownBind",68,1e,93,1d),::hx::paccDynamic) )) {
HXLINE(  71)			::flixel::FlxG_obj::save->data->__SetField(HX_("gpdownBind",68,1e,93,1d),HX_("DPAD_DOWN",72,1a,5b,87),::hx::paccDynamic);
HXLINE(  72)			::haxe::Log_obj::trace(HX_("No GDOWN",2a,bf,3a,4f),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),72,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  74)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gpleftBind",8d,64,a6,ef),::hx::paccDynamic) )) {
HXLINE(  76)			::flixel::FlxG_obj::save->data->__SetField(HX_("gpleftBind",8d,64,a6,ef),HX_("DPAD_LEFT",17,2a,9d,8c),::hx::paccDynamic);
HXLINE(  77)			::haxe::Log_obj::trace(HX_("No GLEFT",cf,ce,7c,54),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),77,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  79)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gprightBind",70,e4,ee,a5),::hx::paccDynamic) )) {
HXLINE(  81)			::flixel::FlxG_obj::save->data->__SetField(HX_("gprightBind",70,e4,ee,a5),HX_("DPAD_RIGHT",ac,b7,f4,f3),::hx::paccDynamic);
HXLINE(  82)			::haxe::Log_obj::trace(HX_("No GRIGHT",f4,33,c5,0f),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),82,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  84)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("pauseBind",d3,ab,7d,45),::hx::paccDynamic) )) {
HXLINE(  86)			::flixel::FlxG_obj::save->data->__SetField(HX_("pauseBind",d3,ab,7d,45),HX_("ENTER",f8,a4,74,ee),::hx::paccDynamic);
HXLINE(  87)			::haxe::Log_obj::trace(HX_("No ENTER",f9,73,0d,2f),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),87,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  89)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gppauseBind",8a,44,8f,3f),::hx::paccDynamic) )) {
HXLINE(  91)			::flixel::FlxG_obj::save->data->__SetField(HX_("gppauseBind",8a,44,8f,3f),HX_("START",42,ac,f9,01),::hx::paccDynamic);
HXLINE(  92)			::haxe::Log_obj::trace(HX_("No ENTER",f9,73,0d,2f),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),92,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  94)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("resetBind",2c,ff,02,87),::hx::paccDynamic) )) {
HXLINE(  96)			::flixel::FlxG_obj::save->data->__SetField(HX_("resetBind",2c,ff,02,87),HX_("R",52,00,00,00),::hx::paccDynamic);
HXLINE(  97)			::haxe::Log_obj::trace(HX_("No RESET",b0,50,4f,a5),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),97,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE(  99)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gpresetBind",e3,97,14,81),::hx::paccDynamic) )) {
HXLINE( 101)			::flixel::FlxG_obj::save->data->__SetField(HX_("gpresetBind",e3,97,14,81),HX_("SELECT",fc,c6,b5,1c),::hx::paccDynamic);
HXLINE( 102)			::haxe::Log_obj::trace(HX_("No RESET",b0,50,4f,a5),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),102,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE( 105)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("muteBind",36,71,98,10),::hx::paccDynamic) )) {
HXLINE( 107)			::flixel::FlxG_obj::save->data->__SetField(HX_("muteBind",36,71,98,10),HX_("ZERO",28,d7,b1,3b),::hx::paccDynamic);
HXLINE( 108)			::haxe::Log_obj::trace(HX_("No MUTE",f8,02,20,ad),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),108,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE( 110)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("volumeUpKeys",69,bb,f5,23),::hx::paccDynamic) )) {
HXLINE( 112)			::flixel::FlxG_obj::save->data->__SetField(HX_("volumeUpKeys",69,bb,f5,23),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("PLUS",5a,07,1b,35)),::hx::paccDynamic);
HXLINE( 113)			::haxe::Log_obj::trace(HX_("No VOLUP",0f,83,80,f9),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),113,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE( 115)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("volumeDownKeys",70,2f,58,0b),::hx::paccDynamic) )) {
HXLINE( 117)			::flixel::FlxG_obj::save->data->__SetField(HX_("volumeDownKeys",70,2f,58,0b),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("MINUS",50,b8,56,86)),::hx::paccDynamic);
HXLINE( 118)			::haxe::Log_obj::trace(HX_("No VOLDOWN",16,8e,b5,b1),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),118,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE( 120)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("fullscreenBind",98,95,ed,45),::hx::paccDynamic) )) {
HXLINE( 122)			::flixel::FlxG_obj::save->data->__SetField(HX_("fullscreenBind",98,95,ed,45),HX_("F",46,00,00,00),::hx::paccDynamic);
HXLINE( 123)			::haxe::Log_obj::trace(HX_("No FULLSCREEN",9a,db,31,ca),::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),123,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            		}
HXLINE( 126)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 126)		::String _hx_tmp1 = ((HX_("",00,00,00,00) + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))) + HX_("-",2d,00,00,00));
HXDLIN( 126)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))) + HX_("-",2d,00,00,00));
HXDLIN( 126)		::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))) + HX_("-",2d,00,00,00));
HXDLIN( 126)		::String _hx_tmp4 = (_hx_tmp3 + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic))));
HXDLIN( 126)		_hx_tmp(_hx_tmp4,::hx::SourceInfo(HX_("source/KeyBinds.hx",93,26,39,47),126,HX_("KeyBinds",17,72,1b,d1),HX_("keyCheck",a9,3e,20,8a)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(KeyBinds_obj,keyCheck,(void))


KeyBinds_obj::KeyBinds_obj()
{
}

bool KeyBinds_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { outValue = ( gamepad ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyCheck") ) { outValue = keyCheck_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"resetBinds") ) { outValue = resetBinds_dyn(); return true; }
	}
	return false;
}

bool KeyBinds_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { gamepad=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *KeyBinds_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo KeyBinds_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &KeyBinds_obj::gamepad,HX_("gamepad",a1,e0,85,89)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void KeyBinds_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyBinds_obj::gamepad,"gamepad");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyBinds_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyBinds_obj::gamepad,"gamepad");
};

#endif

::hx::Class KeyBinds_obj::__mClass;

static ::String KeyBinds_obj_sStaticFields[] = {
	HX_("gamepad",a1,e0,85,89),
	HX_("resetBinds",c7,47,9c,9b),
	HX_("keyCheck",a9,3e,20,8a),
	::String(null())
};

void KeyBinds_obj::__register()
{
	KeyBinds_obj _hx_dummy;
	KeyBinds_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("KeyBinds",17,72,1b,d1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyBinds_obj::__GetStatic;
	__mClass->mSetStaticField = &KeyBinds_obj::__SetStatic;
	__mClass->mMarkFunc = KeyBinds_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(KeyBinds_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< KeyBinds_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyBinds_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyBinds_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyBinds_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyBinds_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_256205a70c995989_14_boot)
HXDLIN(  14)		gamepad = false;
            	}
}

